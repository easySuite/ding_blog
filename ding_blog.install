<?php
/**
 * @file
 * Actions performed on module install/uninstall.
 */

/**
 * Implements hook_install().
 */
function ding_blog_install() {
  // Enable user blog page.
  variable_set('page_manager_blog_user_disabled', FALSE);

  _ding_blog_add_category_terms();
  _ding_blog_enable_nodelist_support();
}

/**
 * Implements hook_uninstall().
 */
function ding_blog_uninstall() {
  // Delete category and its terms.
  $category = taxonomy_vocabulary_machine_name_load('blog_category');
  taxonomy_vocabulary_delete($category->vid);

  // Disable user blog page.
  variable_set('page_manager_blog_user_disabled', TRUE);
}

/**
 * Create default blog categories.
 */
function _ding_blog_add_category_terms() {
  $vocabulary = (object) array(
    'name' => 'Blog Category',
    'description' => 'Blog post categories.',
    'machine_name' => 'blog_category',
  );
  taxonomy_vocabulary_save($vocabulary);

  $category = taxonomy_vocabulary_machine_name_load('blog_category');
  $terms = array(
    t('Film'),
    t('SkÃ¸nlitteratur'),
    t('Krimi'),
  );
  foreach ($terms as $name) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $category->vid;
    taxonomy_term_save($term);
  }
}

/**
 * Enable support of ding_blog in ding_nodelist.
 */
function _ding_blog_enable_nodelist_support() {
  // Enable ding_blog as a nodelist processed CT.
  $content_types = variable_get('ding_nodelist_node_types', array());
  $content_types['blog'] = 'blog';
  variable_set('ding_nodelist_node_types', $content_types);

  // Map ding_blog nodelist template.
  $mappings = array(
    'ding_nodelist.blog.node_blocks' => array(
      'widget' => 'node_blocks',
      'content_type' => 'blog',
    ),
  );

  foreach ($mappings as $filename => $mapping) {
    $fields = array(
      'filename' => $filename,
      'title' => $filename,
      'content_type' => $mapping['content_type'],
      'widget' => $mapping['widget'],
      'status' => 0,
    );
    db_insert('ding_nodelist_templates')->fields($fields)->execute();
  }
}
